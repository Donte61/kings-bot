#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Kingshot Mobile Automation System
Enhanced Kings Bot Pro ile Kingshot Mobile desteƒüi
"""

import cv2
import numpy as np
import pyautogui
import time
import threading
import random
from datetime import datetime

class KingshotMobileAutomation:
    """Kingshot Mobile oyunu i√ßin √∂zel otomasyon sistemi"""
    
    def __init__(self, ai_vision=None):
        """Kingshot Mobile otomasyonunu ba≈ülat"""
        self.ai_vision = ai_vision
        self.game_state = {
            "castle_level": 0,
            "power": 0,
            "resources": {
                "gold": 0,
                "food": 0,
                "wood": 0,
                "stone": 0,
                "iron": 0,
                "gems": 0
            },
            "heroes": [],
            "pets": [],
            "alliance": {
                "name": "",
                "members": 0,
                "territory": 0
            },
            "last_update": datetime.now()
        }
        
        # Kingshot Mobile specific configuration
        self.config = {
            "auto_battle": {"enabled": True, "interval": 300},
            "resource_gathering": {"enabled": True, "interval": 600},
            "hero_upgrade": {"enabled": True, "interval": 900},
            "pet_training": {"enabled": True, "interval": 1200},
            "alliance_help": {"enabled": True, "interval": 180},
            "daily_quests": {"enabled": True, "interval": 3600},
            "territory_defense": {"enabled": True, "interval": 1800},
            "gift_codes": {"enabled": True, "interval": 7200},
            "arena_battle": {"enabled": True, "interval": 1800},
            "dungeon_raids": {"enabled": True, "interval": 2400}
        }
        
        self.auto_systems = {
            "battle": False,
            "resource_gathering": False,
            "hero_upgrade": False,
            "pet_training": False,
            "territory_defense": False
        }
        
        self.task_queue = []
        self.task_history = []
        
        print("üéÆ Kingshot Mobile Automation System ba≈ülatƒ±ldƒ±!")
    
    def update_game_state(self):
        """Oyun durumunu g√ºncelle"""
        try:
            if self.ai_vision:
                screenshot = pyautogui.screenshot()
                screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
                
                # AI ile oyun durumunu analiz et
                game_analysis = self.ai_vision.analyze_game_state(screenshot)
                if game_analysis:
                    self.game_state.update(game_analysis)
            
            self.game_state["last_update"] = datetime.now()
            
        except Exception as e:
            print(f"Oyun durumu g√ºncelleme hatasƒ±: {e}")
    
    def click_template(self, template_name, screenshot=None):
        """Template'i bul ve tƒ±kla"""
        try:
            if screenshot is None:
                screenshot = pyautogui.screenshot()
                screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
            
            # Template matching logic burada olacak
            # ≈ûimdilik random konum d√∂nd√ºr
            x, y = random.randint(100, 800), random.randint(100, 600)
            pyautogui.click(x, y)
            time.sleep(0.5)
            return True
            
        except Exception as e:
            print(f"Template tƒ±klama hatasƒ±: {e}")
            return False
    
    # =============================================================================
    # KINGSHOT MOBILE SPECIFIC FEATURES
    # =============================================================================
    
    def auto_battle_campaign(self):
        """Otomatik kampanya sava≈üƒ±"""
        try:
            print("‚öîÔ∏è Otomatik kampanya sava≈üƒ± ba≈ülatƒ±lƒ±yor...")
            
            # Campaign butonuna tƒ±kla
            if self.click_template("campaign_button.png"):
                time.sleep(2)
                
                # Battle butonuna tƒ±kla
                if self.click_template("battle_button.png"):
                    time.sleep(1)
                    
                    # Auto battle aktif et
                    if self.click_template("auto_battle.png"):
                        print("‚úÖ Auto battle aktif!")
                        
                        # Sava≈ü sonucunu bekle
                        self.wait_for_battle_end()
                        
                        # √ñd√ºlleri topla
                        self.collect_battle_rewards()
                        
                        return True
            return False
            
        except Exception as e:
            print(f"Auto battle hatasƒ±: {e}")
            return False
    
    def wait_for_battle_end(self):
        """Sava≈ü biti≈üini bekle"""
        try:
            print("‚è≥ Sava≈ü biti≈ü bekleniyor...")
            max_wait = 300  # 5 dakika max
            wait_time = 0
            
            while wait_time < max_wait:
                screenshot = pyautogui.screenshot()
                screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
                
                # Victory/Defeat ekranƒ±nƒ± kontrol et
                if self.check_battle_result(screenshot):
                    print("üèÜ Sava≈ü tamamlandƒ±!")
                    return True
                
                time.sleep(5)
                wait_time += 5
            
            print("‚ö†Ô∏è Sava≈ü bekleme timeout!")
            return False
            
        except Exception as e:
            print(f"Battle wait hatasƒ±: {e}")
            return False
    
    def check_battle_result(self, screenshot):
        """Sava≈ü sonucunu kontrol et"""
        try:
            # Victory/Defeat template'lerini kontrol et
            victory_found = self.find_template("victory.png", screenshot)
            defeat_found = self.find_template("defeat.png", screenshot)
            
            return victory_found or defeat_found
            
        except Exception as e:
            print(f"Battle result check hatasƒ±: {e}")
            return False
    
    def collect_battle_rewards(self):
        """Sava≈ü √∂d√ºllerini topla"""
        try:
            print("üéÅ Sava≈ü √∂d√ºlleri toplanƒ±yor...")
            
            # Reward butonlarƒ±nƒ± tƒ±kla
            if self.click_template("collect_reward.png"):
                time.sleep(1)
                
            # Continue/OK butonuna tƒ±kla
            if self.click_template("continue_button.png"):
                print("‚úÖ √ñd√ºller toplandƒ±!")
                return True
                
        except Exception as e:
            print(f"Reward collection hatasƒ±: {e}")
            return False
    
    def upgrade_heroes(self):
        """Hero'larƒ± upgrade et"""
        try:
            print("‚¨ÜÔ∏è Hero upgrade i≈ülemi ba≈ülatƒ±lƒ±yor...")
            
            # Heroes paneline git
            if self.click_template("heroes_button.png"):
                time.sleep(2)
                
                # Her hero i√ßin upgrade kontrol et
                hero_positions = [(200, 300), (400, 300), (600, 300), (200, 500), (400, 500)]
                
                for pos in hero_positions:
                    pyautogui.click(pos)
                    time.sleep(1)
                    
                    # Upgrade butonunu kontrol et
                    if self.click_template("hero_upgrade.png"):
                        time.sleep(2)
                        print(f"‚úÖ Hero upgrade yapƒ±ldƒ±: {pos}")
                    
                    # Geri d√∂n
                    if self.click_template("back_button.png"):
                        time.sleep(1)
                
                return True
                
        except Exception as e:
            print(f"Hero upgrade hatasƒ±: {e}")
            return False
    
    def train_pets(self):
        """Pet'leri eƒüit"""
        try:
            print("üêæ Pet training ba≈ülatƒ±lƒ±yor...")
            
            # Pets paneline git
            if self.click_template("pets_button.png"):
                time.sleep(2)
                
                # Train butonuna tƒ±kla
                if self.click_template("pet_train.png"):
                    time.sleep(1)
                    
                    # Training se√ßeneklerini kontrol et
                    training_options = ["speed_training.png", "attack_training.png", "defense_training.png"]
                    
                    for option in training_options:
                        if self.click_template(option):
                            print(f"‚úÖ Pet training: {option}")
                            time.sleep(2)
                            break
                
                return True
                
        except Exception as e:
            print(f"Pet training hatasƒ±: {e}")
            return False
    
    def collect_resources(self):
        """Kaynaklarƒ± topla"""
        try:
            print("üì¶ Kaynak toplama i≈ülemi ba≈ülatƒ±lƒ±yor...")
            
            # Resource √ºretim binalarƒ±nƒ± kontrol et
            resource_buildings = [
                "gold_mine.png", "food_farm.png", "wood_mill.png", 
                "stone_quarry.png", "iron_mine.png"
            ]
            
            for building in resource_buildings:
                if self.click_template(building):
                    time.sleep(1)
                    
                    # Collect butonuna tƒ±kla
                    if self.click_template("collect_button.png"):
                        print(f"‚úÖ Kaynak toplandƒ±: {building}")
                        time.sleep(1)
            
            return True
            
        except Exception as e:
            print(f"Resource collection hatasƒ±: {e}")
            return False
    
    def alliance_activities(self):
        """Alliance aktiviteleri"""
        try:
            print("ü§ù Alliance aktiviteleri ba≈ülatƒ±lƒ±yor...")
            
            # Alliance paneline git
            if self.click_template("alliance_button.png"):
                time.sleep(2)
                
                # Help all alliance members
                if self.click_template("help_all.png"):
                    print("‚úÖ Alliance help tamamlandƒ±!")
                    time.sleep(1)
                
                # Alliance shop kontrol√º
                if self.click_template("alliance_shop.png"):
                    time.sleep(2)
                    
                    # Free items kontrol et
                    if self.click_template("free_item.png"):
                        print("‚úÖ Alliance shop free item alƒ±ndƒ±!")
                    
                    # Geri d√∂n
                    if self.click_template("back_button.png"):
                        time.sleep(1)
                
                # Territory defense
                if self.click_template("territory_button.png"):
                    time.sleep(2)
                    
                    # Defend butonunu kontrol et
                    if self.click_template("defend_button.png"):
                        print("‚úÖ Territory defense aktif!")
                
                return True
                
        except Exception as e:
            print(f"Alliance activities hatasƒ±: {e}")
            return False
    
    def complete_daily_quests(self):
        """G√ºnl√ºk g√∂revleri tamamla"""
        try:
            print("üìã G√ºnl√ºk g√∂revler kontrol ediliyor...")
            
            # Quest paneline git
            if self.click_template("quest_button.png"):
                time.sleep(2)
                
                # Daily quests sekmesine git
                if self.click_template("daily_quests_tab.png"):
                    time.sleep(1)
                    
                    # Claim butonlarƒ±nƒ± ara
                    for i in range(5):  # 5 quest'e kadar kontrol et
                        if self.click_template("claim_quest.png"):
                            print(f"‚úÖ Daily quest {i+1} tamamlandƒ±!")
                            time.sleep(1)
                
                # Weekly quests kontrol et
                if self.click_template("weekly_quests_tab.png"):
                    time.sleep(1)
                    
                    for i in range(3):  # 3 weekly quest kontrol et
                        if self.click_template("claim_quest.png"):
                            print(f"‚úÖ Weekly quest {i+1} tamamlandƒ±!")
                            time.sleep(1)
                
                return True
                
        except Exception as e:
            print(f"Daily quests hatasƒ±: {e}")
            return False
    
    def arena_battles(self):
        """Arena sava≈ülarƒ±"""
        try:
            print("üèüÔ∏è Arena sava≈ülarƒ± ba≈ülatƒ±lƒ±yor...")
            
            # Arena paneline git
            if self.click_template("arena_button.png"):
                time.sleep(2)
                
                # Challenge butonuna tƒ±kla
                if self.click_template("arena_challenge.png"):
                    time.sleep(1)
                    
                    # Opponent se√ß
                    if self.click_template("select_opponent.png"):
                        time.sleep(1)
                        
                        # Battle butonuna tƒ±kla
                        if self.click_template("arena_battle.png"):
                            print("‚öîÔ∏è Arena sava≈üƒ± ba≈ülatƒ±ldƒ±!")
                            
                            # Sava≈ü sonucunu bekle
                            self.wait_for_battle_end()
                            
                            # √ñd√ºlleri topla
                            self.collect_battle_rewards()
                
                return True
                
        except Exception as e:
            print(f"Arena battles hatasƒ±: {e}")
            return False
    
    def dungeon_raids(self):
        """Dungeon raid'leri"""
        try:
            print("üè∞ Dungeon raid'leri ba≈ülatƒ±lƒ±yor...")
            
            # Dungeon paneline git
            if self.click_template("dungeon_button.png"):
                time.sleep(2)
                
                # Available dungeons kontrol et
                dungeon_types = ["normal_dungeon.png", "elite_dungeon.png", "boss_dungeon.png"]
                
                for dungeon in dungeon_types:
                    if self.click_template(dungeon):
                        time.sleep(1)
                        
                        # Challenge butonuna tƒ±kla
                        if self.click_template("dungeon_challenge.png"):
                            print(f"üó°Ô∏è {dungeon} raid ba≈ülatƒ±ldƒ±!")
                            
                            # Raid sonucunu bekle
                            self.wait_for_battle_end()
                            
                            # √ñd√ºlleri topla
                            self.collect_battle_rewards()
                            
                            # Geri d√∂n
                            if self.click_template("back_button.png"):
                                time.sleep(1)
                
                return True
                
        except Exception as e:
            print(f"Dungeon raids hatasƒ±: {e}")
            return False
    
    def use_gift_codes(self):
        """Gift code'larƒ± kullan"""
        try:
            print("üéÅ Gift code'lar kontrol ediliyor...")
            
            # Settings paneline git
            if self.click_template("settings_button.png"):
                time.sleep(2)
                
                # Gift code butonuna tƒ±kla
                if self.click_template("gift_code_button.png"):
                    time.sleep(1)
                    
                    # G√ºncel gift code'larƒ± dene
                    gift_codes = [
                        "KINGSHOT2025", "NEWPLAYER", "ALLIANCE", 
                        "DAILY", "WEEKLY", "MONTHLY"
                    ]
                    
                    for code in gift_codes:
                        # Input alanƒ±na code yaz
                        pyautogui.click(400, 300)  # Input field pozisyonu
                        time.sleep(0.5)
                        pyautogui.typewrite(code)
                        time.sleep(0.5)
                        
                        # Claim butonuna tƒ±kla
                        if self.click_template("claim_code.png"):
                            print(f"‚úÖ Gift code kullanƒ±ldƒ±: {code}")
                            time.sleep(2)
                        
                        # Input'u temizle
                        pyautogui.hotkey('ctrl', 'a')
                        pyautogui.press('delete')
                        time.sleep(0.5)
                
                return True
                
        except Exception as e:
            print(f"Gift codes hatasƒ±: {e}")
            return False
    
    # =============================================================================
    # AUTO SYSTEMS
    # =============================================================================
    
    def start_auto_battle_system(self):
        """Otomatik sava≈ü sistemini ba≈ülat"""
        def battle_loop():
            while self.auto_systems["battle"]:
                try:
                    print("üîÑ Auto battle sistemi √ßalƒ±≈üƒ±yor...")
                    
                    # Campaign battles
                    self.auto_battle_campaign()
                    time.sleep(30)
                    
                    # Arena battles
                    self.arena_battles()
                    time.sleep(30)
                    
                    # Dungeon raids
                    self.dungeon_raids()
                    
                    # 5 dakika bekle
                    time.sleep(300)
                    
                except Exception as e:
                    print(f"Auto battle system hatasƒ±: {e}")
                    time.sleep(60)
        
        self.auto_systems["battle"] = True
        threading.Thread(target=battle_loop, daemon=True).start()
        print("üöÄ Auto battle sistemi ba≈ülatƒ±ldƒ±!")
    
    def start_auto_resource_system(self):
        """Otomatik kaynak toplama sistemini ba≈ülat"""
        def resource_loop():
            while self.auto_systems["resource_gathering"]:
                try:
                    print("üîÑ Auto resource sistemi √ßalƒ±≈üƒ±yor...")
                    
                    # Kaynaklarƒ± topla
                    self.collect_resources()
                    
                    # 10 dakika bekle
                    time.sleep(600)
                    
                except Exception as e:
                    print(f"Auto resource system hatasƒ±: {e}")
                    time.sleep(300)
        
        self.auto_systems["resource_gathering"] = True
        threading.Thread(target=resource_loop, daemon=True).start()
        print("üöÄ Auto resource sistemi ba≈ülatƒ±ldƒ±!")
    
    def start_auto_hero_system(self):
        """Otomatik hero geli≈ütirme sistemini ba≈ülat"""
        def hero_loop():
            while self.auto_systems["hero_upgrade"]:
                try:
                    print("üîÑ Auto hero sistemi √ßalƒ±≈üƒ±yor...")
                    
                    # Hero'larƒ± upgrade et
                    self.upgrade_heroes()
                    
                    # 15 dakika bekle
                    time.sleep(900)
                    
                except Exception as e:
                    print(f"Auto hero system hatasƒ±: {e}")
                    time.sleep(450)
        
        self.auto_systems["hero_upgrade"] = True
        threading.Thread(target=hero_loop, daemon=True).start()
        print("üöÄ Auto hero sistemi ba≈ülatƒ±ldƒ±!")
    
    def start_auto_pet_system(self):
        """Otomatik pet eƒüitim sistemini ba≈ülat"""
        def pet_loop():
            while self.auto_systems["pet_training"]:
                try:
                    print("üîÑ Auto pet sistemi √ßalƒ±≈üƒ±yor...")
                    
                    # Pet'leri eƒüit
                    self.train_pets()
                    
                    # 20 dakika bekle
                    time.sleep(1200)
                    
                except Exception as e:
                    print(f"Auto pet system hatasƒ±: {e}")
                    time.sleep(600)
        
        self.auto_systems["pet_training"] = True
        threading.Thread(target=pet_loop, daemon=True).start()
        print("üöÄ Auto pet sistemi ba≈ülatƒ±ldƒ±!")
    
    def start_auto_alliance_system(self):
        """Otomatik alliance aktivite sistemini ba≈ülat"""
        def alliance_loop():
            while True:  # Alliance help s√ºrekli √ßalƒ±≈üsƒ±n
                try:
                    print("üîÑ Auto alliance sistemi √ßalƒ±≈üƒ±yor...")
                    
                    # Alliance aktiviteleri
                    self.alliance_activities()
                    
                    # Daily quests
                    self.complete_daily_quests()
                    
                    # Gift codes (g√ºnde bir kez)
                    current_hour = datetime.now().hour
                    if current_hour == 0:  # Gece yarƒ±sƒ±nda
                        self.use_gift_codes()
                    
                    # 3 dakika bekle
                    time.sleep(180)
                    
                except Exception as e:
                    print(f"Auto alliance system hatasƒ±: {e}")
                    time.sleep(90)
        
        threading.Thread(target=alliance_loop, daemon=True).start()
        print("üöÄ Auto alliance sistemi ba≈ülatƒ±ldƒ±!")
    
    def stop_auto_systems(self):
        """T√ºm otomasyon sistemlerini durdur"""
        for system in self.auto_systems:
            self.auto_systems[system] = False
        print("üõë T√ºm otomasyon sistemleri durduruldu!")
    
    def find_template(self, template_name, screenshot):
        """Template'i ekranda bul"""
        try:
            # Template matching logic burada olacak
            # ≈ûimdilik random bool d√∂nd√ºr
            return random.choice([True, False])
        except Exception as e:
            print(f"Template find hatasƒ±: {e}")
            return False
    
    def get_system_status(self):
        """Sistem durumunu al"""
        status = {
            "systems": self.auto_systems.copy(),
            "game_state": self.game_state.copy(),
            "config": self.config.copy(),
            "task_queue_length": len(self.task_queue),
            "task_history_length": len(self.task_history)
        }
        return status


# Test function
def test_kingshot_mobile():
    """Kingshot Mobile otomasyonunu test et"""
    try:
        print("üß™ Kingshot Mobile Automation Test Ba≈ülatƒ±lƒ±yor...")
        
        # AI Vision sistemi ba≈ülat
        ai_vision = None
        try:
            from ai_vision import AIVisionSystem
            ai_vision = AIVisionSystem()
            print("‚úÖ AI Vision sistemi ba≈ülatƒ±ldƒ±")
        except Exception as e:
            print(f"‚ùå AI Vision sistemi ba≈ülatƒ±lamadƒ±: {e}")
        
        # Kingshot Mobile Automation sistemi ba≈ülat
        automation = KingshotMobileAutomation(ai_vision=ai_vision)
        
        # Test senaryolarƒ±
        print("\nüîÑ Test Senaryolarƒ±:")
        
        # Resource toplama testi
        print("üì¶ Resource toplama testi...")
        automation.collect_resources()
        
        # Hero upgrade testi
        print("‚¨ÜÔ∏è Hero upgrade testi...")
        automation.upgrade_heroes()
        
        # Alliance activities testi
        print("ü§ù Alliance activities testi...")
        automation.alliance_activities()
        
        # Daily quest testi
        print("üìã Daily quest testi...")
        automation.complete_daily_quests()
        
        print("\n‚úÖ Test tamamlandƒ±!")
        return True
        
    except Exception as e:
        print(f"‚ùå Test hatasƒ±: {e}")
        return False


if __name__ == "__main__":
    test_kingshot_mobile()
